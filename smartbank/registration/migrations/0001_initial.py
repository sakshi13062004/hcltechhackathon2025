# Generated by Django 4.2.7 on 2025-10-26 07:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone_number",
                    models.CharField(
                        max_length=15,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("date_of_birth", models.DateField()),
                ("ssn_encrypted", models.TextField()),
                ("address_encrypted", models.TextField()),
                (
                    "customer_id",
                    models.CharField(blank=True, max_length=20, unique=True),
                ),
                (
                    "kyc_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "risk_profile",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Risk"),
                            ("MEDIUM", "Medium Risk"),
                            ("HIGH", "High Risk"),
                        ],
                        default="LOW",
                        max_length=10,
                    ),
                ),
                ("is_account_verified", models.BooleanField(default=False)),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("failed_login_attempts", models.IntegerField(default=0)),
                ("account_locked_until", models.DateTimeField(blank=True, null=True)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("kyc_reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("kyc_rejection_reason", models.TextField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "kyc_reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="kyc_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "auth_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField()),
                ("permissions", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "auth_role",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="RateLimit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("identifier", models.CharField(max_length=100)),
                ("endpoint", models.CharField(max_length=200)),
                ("request_count", models.IntegerField(default=1)),
                ("window_start", models.DateTimeField()),
                ("window_end", models.DateTimeField()),
                ("is_blocked", models.BooleanField(default=False)),
                ("block_until", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "rate_limit",
                "indexes": [
                    models.Index(
                        fields=["identifier", "endpoint"],
                        name="rate_limit_identif_235083_idx",
                    ),
                    models.Index(
                        fields=["window_start", "window_end"],
                        name="rate_limit_window__2b5903_idx",
                    ),
                ],
                "unique_together": {("identifier", "endpoint", "window_start")},
            },
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="role_assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_roles",
                        to="registration.role",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "auth_user_role",
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="auth_user_r_user_id_4d1e11_idx",
                    ),
                    models.Index(
                        fields=["role", "is_active"],
                        name="auth_user_r_role_id_d95e7a_idx",
                    ),
                ],
                "unique_together": {("user", "role")},
            },
        ),
        migrations.CreateModel(
            name="SecurityEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("FAILED_LOGIN", "Failed Login"),
                            ("ACCOUNT_LOCKED", "Account Locked"),
                            ("SUSPICIOUS_ACTIVITY", "Suspicious Activity"),
                            ("RATE_LIMIT_EXCEEDED", "Rate Limit Exceeded"),
                            ("UNAUTHORIZED_ACCESS", "Unauthorized Access"),
                            ("PASSWORD_RESET", "Password Reset"),
                            ("2FA_ENABLED", "2FA Enabled"),
                            ("2FA_DISABLED", "2FA Disabled"),
                            ("DATA_CORRUPTION", "Data Corruption"),
                            ("MALICIOUS_FILE", "Malicious File Upload"),
                        ],
                        max_length=50,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True, null=True)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                ("description", models.TextField()),
                ("metadata", models.JSONField(blank=True, null=True)),
                ("resolved", models.BooleanField(default=False)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="security_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "security_event",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "event_type"],
                        name="security_ev_user_id_34753d_idx",
                    ),
                    models.Index(
                        fields=["severity"], name="security_ev_severit_dfa400_idx"
                    ),
                    models.Index(
                        fields=["resolved"], name="security_ev_resolve_8aa199_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="security_ev_created_ca8d45_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("NEW_REGISTRATION", "New Registration"),
                            ("KYC_UPLOAD", "KYC Document Upload"),
                            ("KYC_READY_REVIEW", "KYC Ready for Review"),
                            ("SECURITY_ALERT", "Security Alert"),
                            ("SYSTEM_ALERT", "System Alert"),
                        ],
                        max_length=50,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="NORMAL",
                        max_length=10,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, null=True)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "notification",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["notification_type"],
                        name="notificatio_notific_f8d066_idx",
                    ),
                    models.Index(
                        fields=["priority"], name="notificatio_priorit_86bdfc_idx"
                    ),
                    models.Index(
                        fields=["is_read"], name="notificatio_is_read_8a483f_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="notificatio_created_db7ad3_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="KYCDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("GOVERNMENT_ID", "Government ID"),
                            ("PASSPORT", "Passport"),
                            ("DRIVER_LICENSE", "Driver License"),
                            ("UTILITY_BILL", "Utility Bill"),
                            ("BANK_STATEMENT", "Bank Statement"),
                            ("OTHER", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("document_number", models.CharField(max_length=100)),
                ("document_file_path", models.CharField(max_length=500)),
                ("file_hash", models.CharField(max_length=64)),
                ("file_size", models.BigIntegerField()),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                (
                    "verification_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("VERIFIED", "Verified"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("rejection_reason", models.TextField(blank=True, null=True)),
                ("ocr_text", models.TextField(blank=True, null=True)),
                ("validation_score", models.IntegerField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kyc_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "kyc_document",
                "ordering": ["-upload_date"],
                "indexes": [
                    models.Index(
                        fields=["user", "verification_status"],
                        name="kyc_documen_user_id_217383_idx",
                    ),
                    models.Index(
                        fields=["document_type"], name="kyc_documen_documen_518ab5_idx"
                    ),
                    models.Index(
                        fields=["upload_date"], name="kyc_documen_upload__86666b_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "log_id",
                    models.CharField(default=uuid.uuid4, max_length=50, unique=True),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("CREATE", "Create"),
                            ("UPDATE", "Update"),
                            ("DELETE", "Delete"),
                            ("LOGIN", "Login"),
                            ("LOGOUT", "Logout"),
                            ("KYC_APPROVE", "KYC Approve"),
                            ("KYC_REJECT", "KYC Reject"),
                            ("PASSWORD_CHANGE", "Password Change"),
                            ("ROLE_ASSIGN", "Role Assign"),
                            ("DOCUMENT_UPLOAD", "Document Upload"),
                            ("ACCOUNT_LOCK", "Account Lock"),
                            ("ACCOUNT_UNLOCK", "Account Unlock"),
                        ],
                        max_length=20,
                    ),
                ),
                ("target_model", models.CharField(max_length=50)),
                ("target_id", models.CharField(blank=True, max_length=50, null=True)),
                ("description", models.TextField()),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True, null=True)),
                ("old_values", models.JSONField(blank=True, null=True)),
                ("new_values", models.JSONField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "audit_log",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="audit_log_user_id_835db7_idx",
                    ),
                    models.Index(
                        fields=["action_type"], name="audit_log_action__ff81b5_idx"
                    ),
                    models.Index(
                        fields=["ip_address"], name="audit_log_ip_addr_ef1097_idx"
                    ),
                    models.Index(
                        fields=["timestamp"], name="audit_log_timesta_e8e14e_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="auth_user_email_ece7f7_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["phone_number"], name="auth_user_phone_n_baf3e9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["customer_id"], name="auth_user_custome_b52ff6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["kyc_status"], name="auth_user_kyc_sta_a465e4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["created_at"], name="auth_user_created_2cecd0_idx"
            ),
        ),
    ]
